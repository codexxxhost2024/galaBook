-- Enable Foreign Key Support
PRAGMA foreign_keys = ON;

-- ===========================================
-- 1. Roles Table
-- ===========================================
CREATE TABLE roles (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    role_name VARCHAR(50) UNIQUE NOT NULL
);

-- Insert Default Roles
INSERT INTO roles (role_name) 
VALUES ('User'), ('Host Owner'), ('Super Admin');

-- ===========================================
-- 2. Users Table
-- ===========================================
CREATE TABLE users (
    id TEXT PRIMARY KEY, -- UUID as TEXT
    email VARCHAR(255) UNIQUE NOT NULL,
    password_hash TEXT NOT NULL,
    full_name VARCHAR(150) NOT NULL,
    phone_number VARCHAR(20),
    profile_image TEXT,
    role_id INTEGER NOT NULL,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (role_id) REFERENCES roles(id)
);

-- ===========================================
-- 3. Listings Table
-- ===========================================
CREATE TABLE listings (
    id TEXT PRIMARY KEY, -- UUID as TEXT
    title VARCHAR(255) NOT NULL,
    description TEXT NOT NULL,
    price_per_night DECIMAL(10, 2) NOT NULL,
    max_guests INTEGER NOT NULL,
    location TEXT NOT NULL,
    host_id TEXT NOT NULL,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (host_id) REFERENCES users(id)
);

-- ===========================================
-- 4. Bookings Table
-- ===========================================
CREATE TABLE bookings (
    id TEXT PRIMARY KEY, -- UUID as TEXT
    user_id TEXT NOT NULL,
    listing_id TEXT NOT NULL,
    check_in_date TEXT NOT NULL, -- ISO date string
    check_out_date TEXT NOT NULL, -- ISO date string
    total_price DECIMAL(10, 2) NOT NULL,
    booking_status VARCHAR(50) DEFAULT 'Pending',
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    updated_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (listing_id) REFERENCES listings(id)
);

-- ===========================================
-- 5. Reviews Table
-- ===========================================
CREATE TABLE reviews (
    id TEXT PRIMARY KEY, -- UUID as TEXT
    user_id TEXT NOT NULL,
    listing_id TEXT NOT NULL,
    rating INTEGER CHECK (rating BETWEEN 1 AND 5),
    comment TEXT,
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES users(id),
    FOREIGN KEY (listing_id) REFERENCES listings(id)
);

-- ===========================================
-- 6. Payments Table
-- ===========================================
CREATE TABLE payments (
    id TEXT PRIMARY KEY, -- UUID as TEXT
    booking_id TEXT NOT NULL,
    amount_paid DECIMAL(10, 2) NOT NULL,
    payment_method VARCHAR(100) NOT NULL,
    payment_status VARCHAR(50) DEFAULT 'Pending',
    created_at TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (booking_id) REFERENCES bookings(id)
);

-- ===========================================
-- 7. Admin Logs Table
-- ===========================================
CREATE TABLE admin_logs (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    admin_id TEXT NOT NULL,
    action TEXT NOT NULL,
    action_date TEXT DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (admin_id) REFERENCES users(id)
);

-- ===========================================
-- 8. Listing Images Table (Additional)
-- ===========================================
CREATE TABLE listing_images (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    listing_id TEXT NOT NULL,
    image_url TEXT NOT NULL,
    is_primary BOOLEAN DEFAULT 0,
    FOREIGN KEY (listing_id) REFERENCES listings(id)
);

-- ===========================================
-- 9. Amenities Table (Additional)
-- ===========================================
CREATE TABLE amenities (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    amenity_name VARCHAR(100) UNIQUE NOT NULL
);

-- Junction Table for Listings and Amenities
CREATE TABLE listing_amenities (
    listing_id TEXT NOT NULL,
    amenity_id INTEGER NOT NULL,
    PRIMARY KEY (listing_id, amenity_id),
    FOREIGN KEY (listing_id) REFERENCES listings(id),
    FOREIGN KEY (amenity_id) REFERENCES amenities(id)
);

-- ===========================================
-- 10. Triggers for Updating Timestamps
-- ===========================================

-- Trigger to update 'updated_at' on Users table
CREATE TRIGGER trg_users_updated_at
AFTER UPDATE ON users
FOR EACH ROW
BEGIN
    UPDATE users SET updated_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

-- Trigger to update 'updated_at' on Listings table
CREATE TRIGGER trg_listings_updated_at
AFTER UPDATE ON listings
FOR EACH ROW
BEGIN
    UPDATE listings SET updated_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

-- Trigger to update 'updated_at' on Bookings table
CREATE TRIGGER trg_bookings_updated_at
AFTER UPDATE ON bookings
FOR EACH ROW
BEGIN
    UPDATE bookings SET updated_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

-- Trigger to update 'updated_at' on Payments table
CREATE TRIGGER trg_payments_updated_at
AFTER UPDATE ON payments
FOR EACH ROW
BEGIN
    UPDATE payments SET updated_at = CURRENT_TIMESTAMP WHERE id = OLD.id;
END;

-- ===========================================
-- CRUD OPERATIONS
-- ===========================================

-- Note: Replace placeholder values (e.g., :value) with actual data when executing.

-- ---------------------------
-- 1. Roles CRUD
-- ---------------------------

-- CREATE
INSERT INTO roles (role_name) VALUES ('New Role');

-- READ
SELECT * FROM roles;
SELECT * FROM roles WHERE id = :role_id;

-- UPDATE
UPDATE roles SET role_name = 'Updated Role' WHERE id = :role_id;

-- DELETE
DELETE FROM roles WHERE id = :role_id;

-- ---------------------------
-- 2. Users CRUD
-- ---------------------------

-- CREATE
INSERT INTO users (
    id, email, password_hash, full_name, phone_number, profile_image, role_id
) VALUES (
    'uuid-string', 'user@example.com', 'hashed_password', 'Full Name', '09171234567', 'image_url', 1
);

-- READ
SELECT * FROM users;
SELECT * FROM users WHERE id = 'uuid-string';
SELECT * FROM users WHERE email = 'user@example.com';

-- UPDATE
UPDATE users 
SET 
    email = 'new_email@example.com',
    password_hash = 'new_hashed_password',
    full_name = 'New Full Name',
    phone_number = '09179876543',
    profile_image = 'new_image_url',
    role_id = 2
WHERE id = 'uuid-string';

-- DELETE
DELETE FROM users WHERE id = 'uuid-string';

-- ---------------------------
-- 3. Listings CRUD
-- ---------------------------

-- CREATE
INSERT INTO listings (
    id, title, description, price_per_night, max_guests, location, host_id
) VALUES (
    'listing-uuid', 'Beautiful Beach House', 'A lovely house by the beach...', 1500.00, 6, 'Boracay, Philippines', 'host-uuid'
);

-- READ
SELECT * FROM listings;
SELECT * FROM listings WHERE id = 'listing-uuid';
SELECT * FROM listings WHERE host_id = 'host-uuid';

-- UPDATE
UPDATE listings 
SET 
    title = 'Updated Title',
    description = 'Updated description...',
    price_per_night = 1600.00,
    max_guests = 8,
    location = 'Updated Location'
WHERE id = 'listing-uuid';

-- DELETE
DELETE FROM listings WHERE id = 'listing-uuid';

-- ---------------------------
-- 4. Bookings CRUD
-- ---------------------------

-- CREATE
INSERT INTO bookings (
    id, user_id, listing_id, check_in_date, check_out_date, total_price, booking_status
) VALUES (
    'booking-uuid', 'user-uuid', 'listing-uuid', '2024-01-01', '2024-01-05', 6000.00, 'Confirmed'
);

-- READ
SELECT * FROM bookings;
SELECT * FROM bookings WHERE id = 'booking-uuid';
SELECT * FROM bookings WHERE user_id = 'user-uuid';

-- UPDATE
UPDATE bookings 
SET 
    check_in_date = '2024-01-02',
    check_out_date = '2024-01-06',
    total_price = 6400.00,
    booking_status = 'Cancelled'
WHERE id = 'booking-uuid';

-- DELETE
DELETE FROM bookings WHERE id = 'booking-uuid';

-- ---------------------------
-- 5. Reviews CRUD
-- ---------------------------

-- CREATE
INSERT INTO reviews (
    id, user_id, listing_id, rating, comment
) VALUES (
    'review-uuid', 'user-uuid', 'listing-uuid', 5, 'Amazing stay!'
);

-- READ
SELECT * FROM reviews;
SELECT * FROM reviews WHERE id = 'review-uuid';
SELECT * FROM reviews WHERE listing_id = 'listing-uuid';

-- UPDATE
UPDATE reviews 
SET 
    rating = 4,
    comment = 'Good stay, but room for improvement.'
WHERE id = 'review-uuid';

-- DELETE
DELETE FROM reviews WHERE id = 'review-uuid';

-- ---------------------------
-- 6. Payments CRUD
-- ---------------------------

-- CREATE
INSERT INTO payments (
    id, booking_id, amount_paid, payment_method, payment_status
) VALUES (
    'payment-uuid', 'booking-uuid', 6000.00, 'Credit Card', 'Completed'
);

-- READ
SELECT * FROM payments;
SELECT * FROM payments WHERE id = 'payment-uuid';
SELECT * FROM payments WHERE booking_id = 'booking-uuid';

-- UPDATE
UPDATE payments 
SET 
    amount_paid = 6500.00,
    payment_method = 'Paypal',
    payment_status = 'Refunded'
WHERE id = 'payment-uuid';

-- DELETE
DELETE FROM payments WHERE id = 'payment-uuid';

-- ---------------------------
-- 7. Admin Logs CRUD
-- ---------------------------

-- CREATE
INSERT INTO admin_logs (
    admin_id, action
) VALUES (
    'admin-uuid', 'Updated listing details.'
);

-- READ
SELECT * FROM admin_logs;
SELECT * FROM admin_logs WHERE id = 1;
SELECT * FROM admin_logs WHERE admin_id = 'admin-uuid';

-- UPDATE
-- Typically, admin logs are append-only. If needed:
UPDATE admin_logs 
SET 
    action = 'Updated booking status.'
WHERE id = 1;

-- DELETE
DELETE FROM admin_logs WHERE id = 1;

-- ---------------------------
-- 8. Listing Images CRUD
-- ---------------------------

-- CREATE
INSERT INTO listing_images (
    listing_id, image_url, is_primary
) VALUES (
    'listing-uuid', 'http://example.com/image1.jpg', 1
);

-- READ
SELECT * FROM listing_images;
SELECT * FROM listing_images WHERE listing_id = 'listing-uuid';

-- UPDATE
UPDATE listing_images 
SET 
    image_url = 'http://example.com/new_image1.jpg',
    is_primary = 0
WHERE id = 1;

-- DELETE
DELETE FROM listing_images WHERE id = 1;

-- ---------------------------
-- 9. Amenities CRUD
-- ---------------------------

-- CREATE
INSERT INTO amenities (amenity_name) VALUES ('Free Wi-Fi');

-- READ
SELECT * FROM amenities;
SELECT * FROM amenities WHERE id = 1;

-- UPDATE
UPDATE amenities 
SET 
    amenity_name = 'High-Speed Wi-Fi'
WHERE id = 1;

-- DELETE
DELETE FROM amenities WHERE id = 1;

-- ---------------------------
-- 10. Listing Amenities CRUD
-- ---------------------------

-- CREATE
INSERT INTO listing_amenities (listing_id, amenity_id) VALUES ('listing-uuid', 1);

-- READ
SELECT * FROM listing_amenities;
SELECT * FROM listing_amenities WHERE listing_id = 'listing-uuid';

-- UPDATE
-- Typically, updating would involve deleting and re-inserting associations.
-- For example, to change amenity_id from 1 to 2 for a listing:
DELETE FROM listing_amenities 
WHERE listing_id = 'listing-uuid' AND amenity_id = 1;

INSERT INTO listing_amenities (listing_id, amenity_id) VALUES ('listing-uuid', 2);

-- DELETE
DELETE FROM listing_amenities 
WHERE listing_id = 'listing-uuid' AND amenity_id = 1;

-- ===========================================
-- End of Script
-- ===========================================

